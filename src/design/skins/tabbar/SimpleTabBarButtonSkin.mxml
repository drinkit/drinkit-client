<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!---
 The default skin class for Spark TabBar buttons.

 @see spark.components.TabBar
 @see spark.skins.spark.TabBarSkin

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->

<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21" alpha.disabled="0.5"
                   show="sparkbuttonskin1_showHandler(event)">

    <!-- host component -->
    <fx:Metadata>
		<![CDATA[
        /**
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.ButtonBarButton")]
        ]]>
	</fx:Metadata>

    <fx:Script fb:purpose="styling">




		<![CDATA[
        import design.DesignModel;

        import mx.core.IVisualElement;
        import mx.events.FlexEvent;

        import spark.components.TabBar;

        static private const exclusions:Array = ["labelDisplay"];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array
        {
            return exclusions;
        }

        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }

        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
        {
            super.updateDisplayList(unscaledWidth, unscaledHeight);
            var tabbar:TabBar = TabBar(hostComponent.owner);

            if (getLastVisibleTab(tabbar) === hostComponent)
                separator.visible = false;
            else
                separator.visible = true;
        }

        private function getLastVisibleTab(tabbar:TabBar):IVisualElement
        {
            for (var i:uint = tabbar.dataGroup.numElements - 1; i > 0; i--)
            {
                if (tabbar.dataGroup.getElementAt(i).visible)
                    return tabbar.dataGroup.getElementAt(i);
            }

            return null;
        }

        protected function sparkbuttonskin1_showHandler(event:FlexEvent):void
        {
            var tabbar:TabBar = TabBar(hostComponent.owner);

            if (getLastVisibleTab(tabbar) === hostComponent)
                separator.visible = false;
            else
                separator.visible = true;
        }
        ]]>

	</fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up"/>
        <s:State name="over" stateGroups="overStates"/>
        <s:State name="down" stateGroups="downStates"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates"/>
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates"/>
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates"/>
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates"/>
    </s:states>

    <s:HGroup left="0" right="0" top="2" bottom="2" gap="10" verticalAlign="middle">
        <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
        <s:Label id="labelDisplay" textAlign="center" verticalAlign="middle" maxDisplayedLines="1" horizontalCenter="0"
                 verticalCenter="1"
                 buttonMode="true" width="100%" height="100%" color.up="{DesignModel.ORANGE_BEACH}"
                 color.selectedStates="{DesignModel.VIOLET}"
                 color.over="0xfece64">
        </s:Label>

        <s:Line id="separator" xFrom="0" xTo="0" height="70%">
            <s:stroke>
                <s:SolidColorStroke color="{DesignModel.ORANGE_BEACH}" weight="2"/>
            </s:stroke>
        </s:Line>
    </s:HGroup>


</s:SparkButtonSkin>
