<?xml version="1.0" encoding="utf-8"?>
<components:PopupWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
                        xmlns:s="library://ns.adobe.com/flex/spark"
                        xmlns:components="components.*" xmlns:validators="utils.validators.*"
                        close="onClose(event)" controlBarVisible="true"
                        creationComplete="onCreationComplete(event)" title="Вход" show="onShow(event)">
    <fx:Script>
		<![CDATA[
        import controllers.AuthController;
        import controllers.IOAuthController;
        import controllers.OAuthController;
        import controllers.SignUpController;
        import controllers.supportClasses.SocialNets;

        import design.DesignModel;

        import models.UserInfoModel;
        import models.events.AuthEvent;

        import mx.core.FlexGlobals;
        import mx.events.CloseEvent;
        import mx.events.FlexEvent;
        import mx.managers.PopUpManager;
        import mx.validators.Validator;

        import spark.components.Application;

        private static var _loginWindow:LoginWindow;

        private var _oauthController:IOAuthController;
        private var _authController:AuthController;

        public static function show():void
        {
            if (!_loginWindow)
                _loginWindow = new LoginWindow();

            if (!_loginWindow.isPopUp)
            {
                PopUpManager.addPopUp(_loginWindow, Application(FlexGlobals.topLevelApplication), true);
                PopUpManager.centerPopUp(_loginWindow);
            }
        }

        public static function close():void
        {
            if (_loginWindow)
            {
                PopUpManager.removePopUp(_loginWindow);
                _loginWindow.clear();
            }
        }

        protected function onSocialLoginClick(event:MouseEvent):void
        {
            _oauthController.login(event.currentTarget.name);
        }

        protected function onClose(event:CloseEvent):void
        {
            close();
        }

        protected function onCreationComplete(event:FlexEvent):void
        {
            _authController = new AuthController();
            _oauthController = new OAuthController(_authController, new SignUpController());
            _oauthController.init();
            //
            UserInfoModel.instance.addEventListener(AuthEvent.AUTH_ERROR, onAuthError);
            UserInfoModel.instance.addEventListener(AuthEvent.AUTH_SUCCESS, onAuthSuccess);
        }

        private function onAuthSuccess(event:AuthEvent):void
        {
            close();
        }

        public function clear():void
        {
            userLogin.text = "";
            userPassword.text = "";
        }

        private function onAuthError(event:AuthEvent):void
        {
            showErrorMessage("Неправильный электронный адрес или пароль", errorLabel);
        }

        protected function onBasicLoginClick(event:MouseEvent):void
        {
            if (validateForm())
                _authController.login(userLogin.text, userPassword.text);
        }

        private function validateInput(inputField:TextInput):Boolean {
            if (inputField.errorString != "") {
                showErrorImmediately(inputField);
                inputField.setFocus();
                return false;
            }

            return true;
        }

        private function validateForm():Boolean {
            Validator.validateAll(validators);
            var result:Boolean = true;
            result = result && validateInput(userLogin);
            return result;
        }

        protected function onSignUpButtonClick(event:MouseEvent):void
        {
            close();
            SignupWindow.show();
        }

        protected function onKeyDown(event:KeyboardEvent):void
        {
            if (errorLabel.visible) {
                hideErrorMessage(errorLabel);
            }

            if (event.keyCode == Keyboard.ENTER)
            {
                _authController.login(userLogin.text, userPassword.text);
            }
        }

        private function onShow(event:FlexEvent):void
        {
            hideErrorMessage(errorLabel);
        }
        ]]>
	</fx:Script>

    <fx:Declarations>
        <fx:Array id="validators">
            <validators:ExEmailValidator required="true" source="{userLogin}" property="text"/>
        </fx:Array>
    </fx:Declarations>
    <s:VGroup paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" horizontalAlign="center" width="100%">
        <s:TextInput id="userLogin" width="100%" height="36" borderVisible="true" horizontalCenter="0"
                     prompt="Электронный адрес..." textAlign="left" keyDown="onKeyDown(event)"/>
        <s:TextInput id="userPassword" width="100%" height="36" displayAsPassword="true"
                     prompt="Пароль..." keyDown="onKeyDown(event)"/>
        <s:Label id="errorLabel" includeInLayout="false" visible="false" color="{DesignModel.ORANGE_BEACH}" />
        <s:Button width="100%" label="Войти" click="onBasicLoginClick(event)"/>
        <s:HGroup width="100%">
            <s:Button name="{SocialNets.GOOGLE}"  focusThickness="0" chromeColor="#cc3732" color="white" label="Google" click="onSocialLoginClick(event)" />
            <s:Button name="{SocialNets.VKONTAKTE}" focusThickness="0" chromeColor="#4C75A3" color="white" label="ВКонтакте" click="onSocialLoginClick(event)" />
            <s:Button name="{SocialNets.FACEBOOK}"  focusThickness="0" chromeColor="#3B5998" color="white" label="Facebook" click="onSocialLoginClick(event)" />
        </s:HGroup>
        <s:Button width="100%" label="Зарегистрироваться" click="onSignUpButtonClick(event)"/>
    </s:VGroup>
</components:PopupWindow>
