<?xml version="1.0" encoding="utf-8"?>
<!--
  Created by ypoliakov on 23.07.2014.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
                height="184" autoDrawBackground="false" buttonMode="true" clipAndEnableScrolling="false">

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
    </s:states>
    <fx:Script>
        <![CDATA[
        import flash.filters.BitmapFilterQuality;

        import models.CocktailModel;
        import models.IngredientsModel;
        import models.SearchResultsModel;
        import models.TagsModel;
        import models.supportClasses.Ingredient;

        import mx.collections.ArrayList;

        import spark.components.DataGroup;

        import views.subViews.SearchResultsPanel;

        [Embed(source="/../assets/emptycocktail.png")]
        private var emptyCocktail:Class;

        [Bindable]
        private var _cocktail:CocktailModel;
        private var _model:SearchResultsModel;
        private var _cornerRadius:Number = 5;

        private var gapBetweenIngredients:Number = 5;

        override public function set data(value:Object):void {
            if (value) {
                init();
                //
                _cocktail = value as CocktailModel;
                cocktailNameLabel.text = _cocktail.name;
                cocktailNameLabel.validateNow();
                validateDisplayList();
                validateSize(true);
                validateNow();
                cocktailImage.source = cocktailThumbnail;
                buildRecipe(_cocktail.cocktailIngredients);
                buildTags(_cocktail.cocktailTypeId, _cocktail.options);
            }
        }

        private function get cocktailThumbnail():Object {
            if (_cocktail.thumbnailUrl && _cocktail.thumbnailUrl != "")
                return _cocktail.thumbnailUrl;
            else
                return new emptyCocktail();
        }

        private function init():void {
            if (!_model)
                _model = SearchResultsPanel(List(owner).document).model;
        }

        private function buildTags(cocktailType:int, options:Array):void {
            tagsGroup.removeAllElements();
            tagsGroup.addElement(TagsModel.instance.getTagByIdAndType(cocktailType, TagsModel.COCKTAIL_TYPE_TAG, 32));

            if (options) {
                for (var i:uint = 0; i < options.length; i++) {
                    tagsGroup.addElement(TagsModel.instance.getTagByIdAndType(options[i], TagsModel.COCKTAIL_OPTION_TAG,
                                                                              32));
                }
            }
        }

        private function buildRecipe(ingredients:Array):void {
            var ingredientsDataProvider:ArrayList = new ArrayList();

            if (!ingredients || ingredients.length == 0)
                return;

            var item:Ingredient;

            for (var i:uint = 0; i < ingredients.length; i++) {
                item = new Ingredient(ingredients[i][0],
                                      IngredientsModel.instance.getIngredientById(ingredients[i][0]).name.toLowerCase());
                ingredientsDataProvider.addItem(item);
            }

            ingredientsList.dataProvider = ingredientsDataProvider;
            ingredientsList.dataGroup.validateDisplayList();
            validateSize(true);
            callLater(rearrangeIngredients, [ingredientsList.dataGroup]);
        }

        private function rearrangeIngredients(ingredientsBlocks:DataGroup):void {
            const rendererHeight:Number = 25 + gapBetweenIngredients;
            var maxHeight:Number = ingredientsBlocks.height;
            var maxWidth:Number = ingredientsBlocks.width;
            var ingredients:Array = [];
            var newOrder:Array = [];
            for (var j:int = 0; j < ingredientsBlocks.numElements; j++) {
                var renderer:BaseIngredientItemRenderer = ingredientsBlocks.getElementAt(j) as BaseIngredientItemRenderer;
                if (renderer)
                    ingredients.push(renderer);
            }

            if (ingredients.length == 0) {
                return;
            }

            ingredients.sortOn("width", Array.NUMERIC);
            var totalHeight:Number = 0;

            while (totalHeight + rendererHeight <= maxHeight && ingredients.length != 0) {
                var curRowWidth:Number = 0;
                var rowIsNotFilled:Boolean = true;
                var curIngredient:BaseIngredientItemRenderer = ingredients.shift();
                newOrder.push(curIngredient);
                curRowWidth += curIngredient.width + gapBetweenIngredients;
                while (rowIsNotFilled) {
                    var maxItem:int = -1;
                    var maxSize:Number = 0;
                    var nextIngredient:BaseIngredientItemRenderer = null;
                    for (var i:int = 0; i < ingredients.length; i++) {
                        if (curRowWidth + ingredients[i].width < maxWidth) {
                            if (curRowWidth + ingredients[i].width > maxSize) {
                                maxSize = curRowWidth + ingredients[i].width;
                                maxItem = i;
                            }

                        }
                    }

                    if (maxItem != -1) {
                        newOrder.push(ingredients[maxItem]);
                        curRowWidth += ingredients[maxItem].width + gapBetweenIngredients;
                        ingredients.splice(maxItem, 1);
                    } else {
                        rowIsNotFilled = false;
                    }
                }

                totalHeight += rendererHeight;
            }


            var sortedIngredients:ArrayList = new ArrayList();
            for (var k:int = 0; k < newOrder.length; k++) {
                var ingredient:Ingredient = newOrder[k].data;
                sortedIngredients.addItem(ingredient);
            }

            // create 3 dots data
            if (ingredients.length > 0) {

                const dotsWidth:Number = 30;
                const dotsText:String = "...";
                var dots:Ingredient = new Ingredient(-999, "...", 0, "другие ингредиенты");

                if (curRowWidth + dotsWidth <= maxWidth) {
                    sortedIngredients.addItem(dots);
                } else {
                    var deletedElement:Ingredient = sortedIngredients.getItemAt(sortedIngredients.length - 1) as Ingredient;
                    sortedIngredients.removeItemAt(sortedIngredients.length - 1);
                    sortedIngredients.addItem(dots);
                }

                dots.description = "";
                for (var l:int = 0; l < ingredients.length; l++) {
                    var itemRenderer:BaseIngredientItemRenderer = ingredients[l];
                    dots.description += itemRenderer.data.name + "\n";
                }

                if (deletedElement) {
                    dots.description += deletedElement.name;
                } else {
                    dots.description = dots.description.slice(0, dots.description.length - 1);
                }
            }

            ingredientsList.dataProvider = sortedIngredients;
            ingredientsList.dataGroup.validateDisplayList();
        }

        private function cocktailStructureItemRendererFunction(item:Object):IFactory {
            if (_model.isIngredientSelected(item.id))
                return new ClassFactory(SelectedIngredientItemRenderer);

            return new ClassFactory(NonSelectedIngredientItemRenderer);
        }
        ]]>

    </fx:Script>
    <s:Rect width="100%" height="100%" bottomLeftRadiusX="{_cornerRadius}" bottomLeftRadiusY="{_cornerRadius}"
            bottomRightRadiusX="{_cornerRadius}"
            bottomRightRadiusY="{_cornerRadius}" topLeftRadiusX="{_cornerRadius}" topLeftRadiusY="{_cornerRadius}"
            topRightRadiusX="{_cornerRadius}"
            topRightRadiusY="{_cornerRadius}">
        <s:fill>
            <s:SolidColor color="#ffffff"/>
        </s:fill>
        <s:filters>
            <s:DropShadowFilter alpha="0.5" blurX="8" blurY="8" distance="3" strength="0.9"
                                quality="{BitmapFilterQuality.HIGH}"/>
        </s:filters>
    </s:Rect>
    <s:HGroup width="100%" height="100%" paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4">
        <s:Group>
            <s:BitmapImage id="cocktailImage" width="{CocktailModel.SMALL_IMAGE_WIDTH}"
                           height="{CocktailModel.SMALL_IMAGE_HEIGHT}"/>
            <s:Rect width="{CocktailModel.SMALL_IMAGE_WIDTH}" height="{CocktailModel.SMALL_IMAGE_HEIGHT}">
                <s:stroke>
                    <s:SolidColorStroke color="#e0e0e0" weight="1"/>
                </s:stroke>
            </s:Rect>
        </s:Group>
        <s:VGroup width="100%" height="100%">
            <s:Label id="cocktailNameLabel" width="100%" textAlign="center" styleName="cocktailNameText"/>
            <mx:Spacer width="100%" height="0"/>
            <s:List id="ingredientsList" mouseEnabled="false" width="100%" height="100%" fontFamily="CenturyGothic"
                    color="#1c1c1c" fontSize="12" itemRendererFunction="cocktailStructureItemRendererFunction"
                    labelField="name" borderVisible="false" verticalScrollPolicy="off" horizontalScrollPolicy="off">
                <s:layout>
                    <components:FlowLayout clipAndEnableScrolling="false" horizontalGap="{gapBetweenIngredients}"
                                           verticalGap="{gapBetweenIngredients}"/>
                </s:layout>
            </s:List>
            <s:HGroup id="tagsGroup" gap="5" paddingBottom="4"/>
        </s:VGroup>
    </s:HGroup>
    <s:Rect includeIn="hovered" width="100%" height="100%" bottomLeftRadiusX="{_cornerRadius}"
            bottomLeftRadiusY="{_cornerRadius}" bottomRightRadiusX="{_cornerRadius}"
            bottomRightRadiusY="{_cornerRadius}" topLeftRadiusX="{_cornerRadius}" topLeftRadiusY="{_cornerRadius}"
            topRightRadiusX="{_cornerRadius}"
            topRightRadiusY="{_cornerRadius}">
        <s:fill>
            <s:SolidColor color="#ffae00" alpha="0.1"/>
        </s:fill>
    </s:Rect>
</s:ItemRenderer>
