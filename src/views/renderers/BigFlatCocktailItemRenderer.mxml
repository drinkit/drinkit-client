<?xml version="1.0" encoding="utf-8"?>
<!--
  Created by ypoliakov on 23.07.2014.
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
                height="184" autoDrawBackground="false" buttonMode="true" clipAndEnableScrolling="false"
                creationComplete="onCreationComplete(event)">

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
    </s:states>
    <fx:Script>
        <![CDATA[
        import flash.filters.BitmapFilterQuality;

        import models.CocktailModel;
        import models.IngredientsModel;
        import models.SearchResultsModel;
        import models.TagsModel;
        import models.supportClasses.Ingredient;

        import mx.collections.ArrayList;
        import mx.events.FlexEvent;

        import views.subViews.SearchResultsPanel;

        [Embed(source="/../assets/emptycocktail.png")]
        private var emptyCocktail:Class;

        [Bindable]
        private var _cocktail:CocktailModel;
        private var _model:SearchResultsModel;
        private var _cornerRadius:Number = 5;

        override public function set data(value:Object):void
        {
            if (value)
            {
                init();
                //
                _cocktail = value as CocktailModel;
                cocktailNameLabel.text = _cocktail.name;
                cocktailImage.source = cocktailThumbnail;
                buildRecipe(_cocktail.cocktailIngredients);
                buildTags(_cocktail.cocktailTypeId, _cocktail.options);
            }
        }

        private function get cocktailThumbnail():Object
        {
            if (_cocktail.thumbnailUrl && _cocktail.thumbnailUrl != "")
                return _cocktail.thumbnailUrl;
            else
                return new emptyCocktail();
        }

        private function init():void
        {
            if (!_model)
                _model = SearchResultsPanel(List(owner).document).model;
        }

        private function buildTags(cocktailType:int, options:Array):void
        {
            tagsGroup.removeAllElements();
            tagsGroup.addElement(TagsModel.instance.getTagByIdAndType(cocktailType, TagsModel.COCKTAIL_TYPE_TAG, 32));

            if (options)
            {
                for (var i:uint = 0; i < options.length; i++)
                {
                    tagsGroup.addElement(TagsModel.instance.getTagByIdAndType(options[i], TagsModel.COCKTAIL_OPTION_TAG, 32));
                }
            }
        }

        private function buildRecipe(ingredients:Array):void
        {
            var ingredientsDataProvider:ArrayList = new ArrayList();

            if (!ingredients || ingredients.length == 0)
                return;

            var item:Ingredient;

            for (var i:uint = 0; i < ingredients.length; i++)
            {
                item = new Ingredient(ingredients[i][0], IngredientsModel.instance.getIngredientNameById(ingredients[i][0]).toLowerCase());
                ingredientsDataProvider.addItem(item);
            }

            ingredientsList.dataProvider = ingredientsDataProvider;
        }

        private function cocktailStructureItemRendererFunction(item:Object):IFactory
        {
            if (_model.isIngredientSelected(item.id))
                return new ClassFactory(SelectedIngredientItemRenderer);

            return new ClassFactory(NonSelectedIngredientItemRenderer);
        }

        private function onCreationComplete(event:FlexEvent):void
        {
            width = SearchResultsPanel(List(owner).document).recipeRendererWidth;
        }
        ]]>

    </fx:Script>
    <s:Rect width="100%" height="100%" bottomLeftRadiusX="{_cornerRadius}" bottomLeftRadiusY="{_cornerRadius}"
            bottomRightRadiusX="{_cornerRadius}"
            bottomRightRadiusY="{_cornerRadius}" topLeftRadiusX="{_cornerRadius}" topLeftRadiusY="{_cornerRadius}"
            topRightRadiusX="{_cornerRadius}"
            topRightRadiusY="{_cornerRadius}">
        <s:fill>
            <s:SolidColor color="#ffffff"/>
        </s:fill>
        <s:filters>
            <s:DropShadowFilter alpha="0.5" blurX="8" blurY="8" distance="3" strength="0.9"
                                quality="{BitmapFilterQuality.HIGH}"/>
        </s:filters>
    </s:Rect>
    <s:HGroup width="100%" height="100%" paddingBottom="4" paddingTop="4" paddingLeft="4" paddingRight="4">
        <s:Group>
            <s:BitmapImage id="cocktailImage" width="{CocktailModel.SMALL_IMAGE_WIDTH}"
                           height="{CocktailModel.SMALL_IMAGE_HEIGHT}"/>
            <s:Rect width="{CocktailModel.SMALL_IMAGE_WIDTH}" height="{CocktailModel.SMALL_IMAGE_HEIGHT}">
                <s:stroke>
                    <s:SolidColorStroke color="#e0e0e0" weight="1"/>
                </s:stroke>
            </s:Rect>
        </s:Group>
        <s:VGroup width="100%" height="100%">
            <s:Label id="cocktailNameLabel" width="100%" textAlign="center" styleName="cocktailNameText"/>
            <mx:Spacer width="100%" height="0"/>
            <s:List id="ingredientsList" mouseEnabled="false" width="100%" height="100%" fontFamily="CenturyGothic"
                    color="#1c1c1c" fontSize="14" itemRendererFunction="cocktailStructureItemRendererFunction"
                    labelField="name" borderVisible="false" verticalScrollPolicy="off">
                <s:layout>
                    <components:FlowLayout clipAndEnableScrolling="false"/>
                </s:layout>
            </s:List>
            <s:HGroup id="tagsGroup" gap="5" paddingBottom="4"/>
        </s:VGroup>
    </s:HGroup>
    <s:Rect includeIn="hovered" width="100%" height="100%" bottomLeftRadiusX="{_cornerRadius}"
            bottomLeftRadiusY="{_cornerRadius}" bottomRightRadiusX="{_cornerRadius}"
            bottomRightRadiusY="{_cornerRadius}" topLeftRadiusX="{_cornerRadius}" topLeftRadiusY="{_cornerRadius}"
            topRightRadiusX="{_cornerRadius}"
            topRightRadiusY="{_cornerRadius}">
        <s:fill>
            <s:SolidColor color="#ffae00" alpha="0.1"/>
        </s:fill>
    </s:Rect>
</s:ItemRenderer>
