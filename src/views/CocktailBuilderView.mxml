<?xml version="1.0" encoding="utf-8"?>
<views:ViewBase xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:flextras="spark.flextras.autoCompleteComboBox.*" xmlns:views="views.*"
                xmlns:components="components.*" xmlns:subviews="views.subViews.*" width="1024"
                creationComplete="creationCompleteHandler(event)" mouseFocusEnabled="true"
                contentCreationComplete="bordercontainer1_contentCreationCompleteHandler(event)"
                backgroundColor="0xffffff" borderVisible="false">
    <views:layout>
        <s:VerticalLayout clipAndEnableScrolling="false"/>
    </views:layout>
    <fx:Metadata>
        [Event(type="flash.events.Event", name="pageChanged")]
    </fx:Metadata>
    <fx:Script>
		<![CDATA[
        import controllers.CocktailBuilderController;
        import controllers.MainController;

        import design.DesignModel;

        import models.CocktailBuilderModel;
        import models.IngredientsModel;
        import models.MyBarModel;
        import models.UserInfoModel;
        import models.UserRoles;
        import models.events.AuthEvent;
        import models.supportClasses.CocktailTypes;
        import models.supportClasses.FakeIngredient;
        import models.supportClasses.Ingredient;
        import models.supportClasses.OptionParameters;

        import mx.core.FlexGlobals;
        import mx.events.FlexEvent;
        import mx.events.ScrollEvent;

        import spark.components.Application;
        import spark.events.IndexChangeEvent;

        import utils.ToolTipProvider;

        private var _searchPanelStartOffset:Number;


        [Bindable]
        private var _model:CocktailBuilderModel;

        public function get model():CocktailBuilderModel {
            return _model;
        }

        [Bindable]
        private var _controller:CocktailBuilderController;

        public function get controller():CocktailBuilderController {
            return _controller;
        }

        protected function onIngredientsChanged(event:IndexChangeEvent):void {
            if (event.newIndex >= 0) {
                var ingredient:Ingredient = IngredientsModel.instance.getIngredientById(ingrChoose.selectedItem.groupId);
                ingrChoose.selectedIndex = -1;
                ingrChoose.validateProperties();
                focusManager.setFocus(ingrChoose.textInput);
                focusManager.showFocus();
                ingrChoose.textInput.selectAll();

                if (_controller.addIngredientToQuery(ingredient)) {
                    _controller.performSearch();
                }
            }
        }

        private function filterCBList(item:Object):Boolean {
            var inputValue:String = ingrChoose.typeAheadText.toLowerCase();
            var ingr:FakeIngredient = FakeIngredient(item);
            return (String(ingr.name).toLowerCase().search(inputValue) > -1 && (_model.selectedIngredientsList.getItemIndex(item) == -1));
        }

        protected function creationCompleteHandler(event:FlexEvent):void {
            _model = new CocktailBuilderModel();
            _controller = new CocktailBuilderController(_model);
            IngredientsModel.instance.addEventListener(IngredientsModel.INGREDIENTS_LOADED, onIngredientsLoaded);
            //
            MainController.instance.requestIngredients();
            //
            (FlexGlobals.topLevelApplication as Application).addEventListener(ScrollEvent.SCROLL, onScroll);
            UserInfoModel.instance.addEventListener(AuthEvent.AUTH_SUCCESS, onAuthChanged);
            UserInfoModel.instance.addEventListener(AuthEvent.LOGOUT, onAuthChanged);
        }

        private function onAuthChanged(event:AuthEvent):void {
            if (_model.cocktailsList) {
                _model.cocktailsList.refresh();
                _model.signalizeAboutChange();
            }
        }

        private function onIngredientsLoaded(event:Event):void {
            _model.ingredientsList.filterFunction = filterCBList;
            _controller.performSearch();
        }

        private function onScroll(event:ScrollEvent):void {
            // FIX: remove magic number!
            if (event.position > 200) {
                searchPanel.y = event.position - 200 + 5;
            }
            else {
                searchPanel.y = 5;
            }
        }


        protected function cocktailTypeChangeHandler(event:Event):void {
            _controller.toggleCocktailType(uint(event.currentTarget.name), event.currentTarget.selected);
            _controller.performSearch();
        }

        protected function optionChangeHandler(event:Event):void {
            _controller.toggleOption(uint(event.currentTarget.name), event.currentTarget.selected);
            _controller.performSearch();
        }

        protected function bordercontainer1_contentCreationCompleteHandler(event:FlexEvent):void {
            validateNow();
            _searchPanelStartOffset = searchPanel.localToGlobal(new Point(0, searchPanel.y)).y;
        }

        private function onResetButtonClick(event:MouseEvent):void {
            longDrinkButton.selected = false;
            shortDrinkButton.selected = false;
            shooterDrinkButton.selected = false;
            _model.selectedCocktailTypes = [];
            //
            burnButton.selected = false;
            flackyButton.selected = false;
            iceButton.selected = false;
            ibaButton.selected = false;
            checkedButton.selected = false;
            _model.selectedOptions = [];
            //
            _model.selectedIngredientsList.removeAll();
            //
            _controller.performSearch();
        }

        private function onAddBarIngredientsButtonClick(event:MouseEvent):void {
            if (!MyBarModel.instance.activeIngredients) {
                return;
            }

            _controller.addIngredientsToQuery(MyBarModel.instance.activeIngredients);
            ingrChoose.validateProperties();
            _controller.performSearch();
        }

        private function onPageChanged(event:Event):void {
            dispatchEvent(event);
        }
        ]]>
	</fx:Script>
    <fx:Declarations>
    </fx:Declarations>
    <s:HGroup width="100%" clipAndEnableScrolling="false">
        <s:Group height="100%">
            <s:VGroup id="searchPanel" paddingTop="5" width="250" y="5">
                <s:BorderContainer width="100%" height="100%" borderVisible="false">
                    <s:layout>
                        <s:VerticalLayout paddingLeft="0" paddingRight="5" paddingTop="5"/>
                    </s:layout>

                    <s:Label text="Формат коктейля" styleName="headerGreenText" width="100%" textAlign="center"/>
                    <s:Spacer width="100%" height="5"/>
                    <s:HGroup id="cocktailTypesGroup" width="100%" gap="15" horizontalAlign="center">
                        <s:ToggleButton id="longDrinkButton" width="64" height="64" name="{CocktailTypes.LONG_DRINK}"
                                        change="cocktailTypeChangeHandler(event)"
                                        icon="@Embed(source='/../assets/long-64.png')"
                                        toolTip="{ToolTipProvider.getToolTip(ToolTipProvider.LONG)}"/>
                        <s:ToggleButton id="shortDrinkButton" width="64" height="64" name="{CocktailTypes.SHORT_DRINK}"
                                        change="cocktailTypeChangeHandler(event)"
                                        icon="@Embed(source='/../assets/short-64.png')"
                                        toolTip="{ToolTipProvider.getToolTip(ToolTipProvider.SHORT)}"/>
                        <s:ToggleButton id="shooterDrinkButton" width="64" height="64" name="{CocktailTypes.SHOOTER}"
                                        change="cocktailTypeChangeHandler(event)"
                                        icon="@Embed(source='/../assets/shooter-64.png')"
                                        toolTip="{ToolTipProvider.getToolTip(ToolTipProvider.SHOOTER)}"/>
                    </s:HGroup>
                    <s:Spacer width="100%" height="0"/>
                    <s:Line yFrom="0" yTo="0" width="100%">
                        <s:stroke>
                            <s:SolidColorStroke color="{DesignModel.LIGHT_GREEN}" weight="1" alpha="0.7"/>
                        </s:stroke>
                    </s:Line>
                    <s:Spacer width="100%" height="10"/>
                    <s:Label text="Дополнительные опции" styleName="headerGreenText" width="100%" textAlign="center"/>
                    <s:Group id="optionsGroup" width="100%" height="54">
                        <s:layout>
                            <components:FlowLayout clipAndEnableScrolling="false" horizontalGap="13" verticalGap="10"
                                                   paddingBottom="5" paddingRight="5"
                                                   paddingTop="5" />
                        </s:layout>

                        <s:ToggleButton id="burnButton" label="горящий" name="{OptionParameters.BURNING}"
                                        buttonMode="true"
                                        skinClass="design.skins.OptionLabelSkin"
                                        click="optionChangeHandler(event)" tabFocusEnabled="false"/>
                        <s:ToggleButton id="flackyButton" label="слоёный" name="{OptionParameters.FLACKY}"
                                        buttonMode="true"
                                        skinClass="design.skins.OptionLabelSkin"
                                        click="optionChangeHandler(event)" tabFocusEnabled="false"/>
                        <s:ToggleButton id="iceButton" label="со льдом" name="{OptionParameters.WITH_ICE}"
                                        buttonMode="true"
                                        skinClass="design.skins.OptionLabelSkin"
                                        click="optionChangeHandler(event)" tabFocusEnabled="false"/>
                        <s:ToggleButton id="ibaButton" label="официальный" name="{OptionParameters.IBA}"
                                        buttonMode="true"
                                        skinClass="design.skins.OptionLabelSkin"
                                        click="optionChangeHandler(event)" tabFocusEnabled="false"
                                        toolTip="{ToolTipProvider.getToolTip(ToolTipProvider.IBA)}"/>
                        <s:ToggleButton id="checkedButton" label="проверенный" name="{OptionParameters.CHECKED}"
                                        buttonMode="true"
                                        skinClass="design.skins.OptionLabelSkin"
                                        click="optionChangeHandler(event)" tabFocusEnabled="false"
                                        toolTip="{ToolTipProvider.getToolTip(ToolTipProvider.CHECKED)}"/>
                    </s:Group>
                    <s:Line yFrom="0" yTo="0" width="100%">
                        <s:stroke>
                            <s:SolidColorStroke color="{DesignModel.LIGHT_GREEN}" weight="1" alpha="0.7"/>
                        </s:stroke>
                    </s:Line>
                    <s:Spacer width="100%" height="5"/>
                    <s:Label text="Выбор ингредиентов" styleName="headerGreenText" width="100%" textAlign="center"/>
                    <s:Spacer width="100%" height="5"/>
                    <s:VGroup width="100%" height="100%">
                        <flextras:AutoCompleteComboBoxLite id="ingrChoose" width="100%" height="26"
                                                           change="onIngredientsChanged(event)" focusAlpha="0"
                                                           dataProvider="{_model.ingredientsList}"
                                                           filterFunction="filterCBList" styleName="regularText"
                                                           itemRenderer="components.renderers.AutoCompleteRenderer"
                                                           skinClass="design.skins.LiveSearchComboBoxSkin"                                                           
                                                           labelField="caption" paddingLeft="0"
                                                           prompt="напишите ингредиент..."/>
                        <s:List width="100%" minWidth="200" maxHeight="250" hasFocusableChildren="false"
                                dataProvider="{_model.selectedIngredientsList}" focusEnabled="false"
                                itemRenderer="views.renderers.IngredientItemRenderer" labelField="name"
                                borderVisible="false">
                            <s:layout>
                                <components:FlowLayout clipAndEnableScrolling="true" paddingLeft="0" paddingBottom="5"
                                                       paddingRight="5" paddingTop="5"/>
                            </s:layout>
                        </s:List>
                        <s:Label text="Добавить ингредиенты из бара" styleName="textButton"
                                 buttonMode="{UserInfoModel.instance.role >= UserRoles.USER}"
                                 click="onAddBarIngredientsButtonClick(event)"
                                 enabled="{UserInfoModel.instance.role >= UserRoles.USER}"
                                 toolTip="{UserInfoModel.instance.role == UserRoles.ANONYMOUS ? ToolTipProvider.getToolTip(ToolTipProvider.USER_BAR_NOT_ALLOWED) : ''}"/>
                        <s:Label text="Сбросить фильтры" buttonMode="true" styleName="textButton" click="onResetButtonClick(event)"/>
                    </s:VGroup>
                </s:BorderContainer>
            </s:VGroup>
        </s:Group>
        <subviews:SearchResultsPanel width="100%" model="{_model}" clipAndEnableScrolling="false" itemsPerPage="20"
                                     recipeRendererWidth="352" pageChanged="onPageChanged(event)"/>
    </s:HGroup>

</views:ViewBase>
